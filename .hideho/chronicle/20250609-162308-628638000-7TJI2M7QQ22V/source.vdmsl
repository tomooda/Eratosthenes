module Eratosthenesexports alldefinitionsstate Sieve of    sieve : set of nat1    size : natinit s == s = mk_Sieve({}, 0)endoperations    isPrime : nat1 ==> bool    isPrime(n) ==        (if n > size then createSieve(n);        return n in set sieve)    pre  n >= 2    post         RESULT <=> not (exists p in set {2, ..., n - 1} & n mod p = 0);        createSieve : nat1 ==> ()    createSieve(n) ==        (dcl newSieve:set of nat1 := {2, ..., n}, i:nat1 := 2;        while i  * i <= n        do            (if                i in set newSieve            then                newSieve := newSieve \ {i  * j | j in set {2, ..., n div i}};            i := i + 1);        atomic(            sieve := newSieve;            size := n))    pre  size >= 2    post         forall n in set {2, ..., size} &            n in set sieve <=> not (exists p in set {2, ..., n - 1} & n mod p = 0);traces    Singles:        let n in set {2, ..., 50} in isPrime(n);        Pairs:        let n1, n2 in set {2, ..., 50}        in            (isPrime(n1);            isPrime(n2));end Eratosthenesmodule UnitTestingexports alldefinitionstypes    AssertFailure :: msg : seq of char;        AssertEqualsFailure :: actual : ? expected : ? msg : seq of char;operations    assert : bool * seq of char ==> ()    assert(b, msg) == if not b then exit mk_AssertFailure(msg);        assertEquals : ? * ? * seq of char ==> ()    assertEquals(actual, expected, msg) ==        if            actual <> expected        then            exit mk_AssertEqualsFailure(actual, expected, msg);        assertApproxEquals : real * real * real * seq of char ==> ()    assertApproxEquals(actual, expected, accuracy, msg) ==        if            abs (actual - expected) > accuracy        then            exit mk_AssertEqualsFailure(actual, expected, msg);        shouldFail : (bool -> ?) * seq of char ==> ()    shouldFail(f, msg) ==        trap - with skip in let - = f(true) in assert(false, msg);end UnitTestingmodule EratosthenesTestimports    from Eratosthenes all,    from UnitTesting        operations assert: bool * seq of char ==> () renamed assert;exports alldefinitionsvalues    no_sieve : Eratosthenes`Sieve = mk_Eratosthenes`Sieve([]);        sieve : Eratosthenes`Sieve =        mk_Eratosthenes`Sieve([false, true, true, false, true, false]);operations    test_pre_isPrime : () ==> ()    test_pre_isPrime() ==        (assert(not Eratosthenes`pre_isPrime(1, no_sieve), "should not give 1");        assert(not Eratosthenes`pre_isPrime(1, sieve), "should not give 1");        assert(Eratosthenes`pre_isPrime(2, no_sieve), "2 without sieve is OK");        assert(Eratosthenes`pre_isPrime(2, sieve), "2 with sieve is OK");        assert(Eratosthenes`pre_isPrime(4, no_sieve), "4 without sieve is OK");        assert(Eratosthenes`pre_isPrime(4, sieve), "4 with sieve is OK");        skip);        test_isPrime : () ==> ()    test_isPrime() ==        (assert(Eratosthenes`isPrime(2), "2 is prime");        assert(Eratosthenes`isPrime(3), "3 is prime");        assert(Eratosthenes`isPrime(5), "5 is prime");        assert(Eratosthenes`isPrime(5), "5 is prime");        assert(not Eratosthenes`isPrime(6), "6 is not prime");        assert(Eratosthenes`isPrime(5), "5 is prime"));end EratosthenesTest