module EratosthenesTest
imports
    from Eratosthenes all,
    from UnitTesting
        operations
            assert: bool * seq of char ==> () renamed assert;
            assertEquals: ? * ? * seq of char ==> () renamed assertEquals;
            assertApproxEquals: real * real * real * seq of char ==> ()
                renamed assertApproxEquals;
            shouldFail: (bool -> ?) * seq of char ==> () renamed shouldFail;
exports all
definitions
operations
    test_pre_isPrime : () ==> ()
    test_pre_isPrime() ==
        (shouldFail(lambda x : bool & Eratosthenes`isPrime(1), "shouldn't test 1");
        Eratosthenes`isPrime(2);
        Eratosthenes`isPrime(3);
        Eratosthenes`isPrime(4);
        Eratosthenes`isPrime(5);
        skip);
    
    test_isPrime : () ==> ()
    test_isPrime() ==
        (dcl numAct:nat := 0;
        shouldFail(lambda x : bool & Eratosthenes`isPrime(1), "shouldn't test 1");
        numAct := #act(Eratosthenes`createSieve);
        assert(Eratosthenes`isPrime(2), "2 is prime");
        assertEquals(#act(Eratosthenes`createSieve) - numAct, 1, "called");
        numAct := #act(Eratosthenes`createSieve);
        assert(Eratosthenes`isPrime(3), "3 is prime");
        assertEquals(#act(Eratosthenes`createSieve) - numAct, 1, "called");
        numAct := #act(Eratosthenes`createSieve);
        assert(Eratosthenes`isPrime(5), "5 is prime");
        assertEquals(#act(Eratosthenes`createSieve) - numAct, 1, "called");
        numAct := #act(Eratosthenes`createSieve);
        assert(Eratosthenes`isPrime(5), "5 is prime");
        assertEquals(#act(Eratosthenes`createSieve) - numAct, 0, "not called");
        numAct := #act(Eratosthenes`createSieve);
        assert(not Eratosthenes`isPrime(6), "6 is not prime");
        assertEquals(#act(Eratosthenes`createSieve) - numAct, 1, "called");
        numAct := #act(Eratosthenes`createSieve);
        assert(Eratosthenes`isPrime(5), "5 is prime");
        assertEquals(#act(Eratosthenes`createSieve) - numAct, 0, "not called");
        numAct := #act(Eratosthenes`createSieve);
        skip);
end EratosthenesTest