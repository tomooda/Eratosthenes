module EratosthenesTest
imports
    from Eratosthenes all,
    from UnitTesting
        operations
            assert: bool * seq of char ==> () renamed assert;
            assertEquals: ? * ? * seq of char ==> () renamed assertEquals;
            assertApproxEquals: real * real * real * seq of char ==> ()
                renamed assertApproxEquals;
            shouldFail: (bool -> ?) * seq of char ==> () renamed shouldFail;
exports all
definitions
values
    no_sieve : Eratosthenes`Sieve = mk_Eratosthenes`Sieve([]);
    
    sieve : Eratosthenes`Sieve =
        mk_Eratosthenes`Sieve([false, true, true, false, true, false]);
operations
    test_pre_isPrime : () ==> ()
    test_pre_isPrime() ==
        (assert(not Eratosthenes`pre_isPrime(1, no_sieve), "should not give 1");
        assert(not Eratosthenes`pre_isPrime(1, sieve), "should not give 1");
        assert(Eratosthenes`pre_isPrime(2, no_sieve), "2 without sieve is OK");
        assert(Eratosthenes`pre_isPrime(2, sieve), "2 with sieve is OK");
        assert(Eratosthenes`pre_isPrime(4, no_sieve), "4 without sieve is OK");
        assert(Eratosthenes`pre_isPrime(4, sieve), "4 with sieve is OK");
        skip);
    
    test_isPrime : () ==> ()
    test_isPrime() ==
        (assert(Eratosthenes`isPrime(2), "2 is prime");
        assert(Eratosthenes`isPrime(3), "3 is prime");
        assert(Eratosthenes`isPrime(5), "5 is prime");
        assert(Eratosthenes`isPrime(5), "5 is prime");
        assert(not Eratosthenes`isPrime(6), "6 is not prime");
        assert(Eratosthenes`isPrime(5), "5 is prime"));
end EratosthenesTest